<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<j:ApplicationResponsiveView
    xmlns:fx="http://ns.adobe.com/mxml/2009"
    xmlns:j="library://ns.apache.org/royale/jewel"
    xmlns:js="library://ns.apache.org/royale/basic"
    xmlns:html="library://ns.apache.org/royale/html"
    xmlns:models="models.*"
    xmlns:local="*"
    initComplete="setNavSelection()">


    <fx:Script>
        <![CDATA[
            import org.apache.royale.events.Event;
            import org.apache.royale.jewel.supportClasses.ISelectableContent;
            import org.apache.royale.routing.RouteState;

            import vos.NavigationLinkVO;

            private var currentContent:ISelectableContent;
            private var currentNavOption:NavigationLinkVO;
            
            private function setNavSelection():void
            {
                var routeState:RouteState = router.routeState;
                var baseName:String = routeState.getBaseName();
                
                if(baseName)
                {
                    setNavFromHash(baseName);
                }
                else
                {
                    goToHome();
                }
            }

            private function setNavFromHash(hash:String):void
            {
                var l:uint = mainNavigationModel.containerDrawerNavigation.length;
                
                while(l--)
                {
                    currentNavOption = NavigationLinkVO(mainNavigationModel.containerDrawerNavigation.getItemAt(l));
                
                    if(currentNavOption.hash == hash)
                    {
                        containerNavigation.selectedItem = currentNavOption;
                        navigateTo();
                        return;
                    }
                }
            }

            private function hashChanged():void
            {
                if(currentNavOption.subMenu)
                    return;

                setNavSelection();
            }

            private function navChangeHandler(event:Event):void
            {
                currentNavOption = (event.target as Navigation).selectedItem as NavigationLinkVO;
                
                router.routeState.title = currentNavOption.label;
                router.routeState.path = currentNavOption.hash;
                router.setState();
                
                navigateTo();
            }

            private function navigateTo():void
            {
                main.selectedContent = currentNavOption.hash;
                
                if(!drawer.fixed)
                    drawer.close();
            }

            private function collapsibleChangeHandler(event:Event):void
            {
                currentNavOption = (event.target as Navigation).selectedItem as NavigationLinkVO;
                currentNavOption = currentNavOption.selectedChild;
                
                router.routeState.title = currentNavOption.label;
                router.routeState.path = currentNavOption.hash;
                router.setState();
                
                navigateTo();
            }

            private function toggleTopAppBarFixed():void
            {
                topappbar.fixed = !topappbar.fixed;
                main.hasTopAppBar = topappbar.fixed;
            }

            private function goToHome():void
            {
                currentNavOption = new NavigationLinkVO("Activity Log", "activity_log", null);
                main.selectedContent = currentNavOption.hash;
            }
        ]]>
    </fx:Script>

    <j:beads>
        <js:Router id="router" stateChange="hashChanged()" /> 
        <js:ContainerDataBinding/>
        <j:CleanValidationErrors/>
    </j:beads>

    <j:model>
        <models:MainNavigationModel localId="mainNavigationModel"/>
    </j:model>

    <j:Drawer localId="drawer"> 

        <j:beads>
            <j:ResponsiveDrawer auto="true"/>
        </j:beads>

        <j:DrawerHeader>
            <j:ImageButton src="assets/logo.png" height="128" click="goToHome()"/>
        </j:DrawerHeader>

        <j:DrawerContent>

            <j:Navigation localId="containerNavigation" change="navChangeHandler(event)"
                className="navIconLinkItemRenderer" dataProvider="{mainNavigationModel.containerDrawerNavigation}">

                <j:beads>
                    <j:NavigationActionNotifier/>
                </j:beads>

            </j:Navigation>

        </j:DrawerContent>

        <j:DrawerFooter>
            <j:BarRow>
                <j:BarSection>
                    <j:IconButton>
                        <j:icon>
                            <js:FontIcon text="{MaterialIconType.FEEDBACK}" material="true"/>
                        </j:icon>
                    </j:IconButton>
                </j:BarSection>
            </j:BarRow>
        </j:DrawerFooter>

    </j:Drawer>

    <j:FooterBar localId="footerbar" fixed="true" hasDrawer="{drawer.fixed &amp;&amp; drawer.isOpen}">
        <j:BarRow>
            <j:BarSection itemsHorizontalAlign="itemsCenter">
                <html:H3 text="Test" />
            </j:BarSection>
        </j:BarRow>
    </j:FooterBar>

    <j:TopAppBar localId="topappbar" fixed="true" hasDrawer="{drawer.fixed &amp;&amp; drawer.isOpen}">
        <j:BarRow>
            <j:BarSection>
                <j:IconButton click="drawer.isOpen ? drawer.close() : drawer.open()">
                    <j:beads>
                        <j:ResponsiveVisibility desktopVisible="false" wideScreenVisible="false"/>
                    </j:beads>
                    <j:icon>
                        <js:FontIcon text="{MaterialIconType.MENU}" material="true"/>
                    </j:icon>
                </j:IconButton>
                <j:BarTitle id="barTitle" text="Jewel Playground"/>
            </j:BarSection>
            <j:BarSection itemsHorizontalAlign="itemsRight">
            </j:BarSection>
        </j:BarRow>
    </j:TopAppBar>

    <j:ApplicationMainContent localId="main" hasTopAppBar="true" hasFooterBar="true">
        <local:ActivityLog name="activity_log"/>
    </j:ApplicationMainContent>

</j:ApplicationResponsiveView>
